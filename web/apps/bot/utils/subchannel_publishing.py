from .telegram import perform_action_with_retries
from apps.announcement.models import Announcement
from apps.bot.models import SubchannelMessage
from apps.bot.services import telethon
from apps.tag.models import Tag
from telethon.sync import TelegramClient
from telethon.tl.types import Message
from typing import LiteralString


def create_subchannel_message(announcement: Announcement) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–∫–∞–Ω–∞–ª–∞.

    Args:
        announcement (Announcement): –û–±—ä—è–≤–ª–µ–Ω–∏–µ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    Returns:
        str: –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–æ—Ç–æ–≤–æ–µ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ.
    """
    return (
        f"{_prepare_subchannel_tags(announcement)}{announcement.name}\n{_prepare_subchannel_text(announcement)}ü§ñ"
        f"\n{announcement.published_message_link}"
    )


def send_text_message_with_retries_to_subchannel(message: str, tag: Tag) -> Message | None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –ø–æ–¥–∫–∞–Ω–∞–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏.

    Args:
        message (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
        tag (Tag): –¢–µ–≥, –ø–æ–¥–∫–∞–Ω–∞–ª –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.

    Returns:
        Optional[Message]: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.
                       –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.
    """
    return telethon.run_in_new_thread(
        _send_message_to_subchannel,
        message=message,
        tag=tag,
    )


def _send_message_to_subchannel(message: str, tag: Tag) -> Message | None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –ø–æ–¥–∫–∞–Ω–∞–ª."""
    telethon.set_new_event_loop()
    with telethon.fetch_telegram_client() as client:
        client: TelegramClient  # type: ignore[no-redef]
        return perform_action_with_retries(
            client.send_message,
            entity=int(tag.channel_id),
            message=message,
        )


def update_announcement_and_save_subchannel_message(
    announcement: Announcement, text_message: Message, tag: Tag
) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–∞–Ω–∞–ª–∞.

    Args:
        announcement (Announcement): –û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
        text_message (str): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        tag (Tag): –¢–µ–≥, –ø–æ–¥–∫–∞–Ω–∞–ª –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    """
    SubchannelMessage.objects.create(
        announcement=announcement,
        channel_id=int(tag.channel_id),
        message_id=int(text_message.id),
        type=SubchannelMessage.MessageType.TEXT,
        tag=tag,
    )


def _prepare_subchannel_tags(announcement: Announcement) -> LiteralString:
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ç–µ–≥–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.

    Args:
        announcement (Announcement): –û–±—ä—è–≤–ª–µ–Ω–∏–µ, —Ç–µ–≥–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å.

    Returns:
        LiteralString | Literal[""]: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏ –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É,
        –µ—Å–ª–∏ —Ç–µ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
    """
    tags = announcement.tags.filter(type="visible")
    if tags:
        return f"{' '.join([tag.name for tag in tags])}\n"
    return ""


def _prepare_subchannel_text(announcement: Announcement) -> LiteralString:
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è.

    Args:
        announcement (Announcement): –û–±—ä—è–≤–ª–µ–Ω–∏–µ, —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å.

    Returns:
        LiteralString | Literal[""]: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É,
        –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
    """
    if announcement.text:
        return f"{announcement.text}\n"
    return ""
